// Code generated by hertz generator.

package main

import (
	"context"
	"xzdp/biz/dal/mysql"
	"xzdp/biz/dal/redis"
	"xzdp/biz/middleware/interceptor"
	"xzdp/conf"

	"net/http"
	_ "net/http/pprof" // 导入 pprof HTTP handler

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
)

func main() {
	go func() {
		_ = http.ListenAndServe(":6060", nil)
	}()
	h := server.Default(server.WithHostPorts(conf.GetConf().Hertz.Address))
	h.Use(interceptor.CheckToken)
	h.Use(interceptor.Cors)
	excludedPaths := []string{
		"/shop",
		"/voucher",
		"/shop-type",
		"/upload",
		"/blog/hot",
		"/user/code",
		"/user/login",
		"/follow",
		"/imgs",
		"/message",
		"/blog",
	}

	// excludedPaths := map[string]bool{
	// 	"/shop":           true,
	// 	"/voucher":        true,
	// 	"/shop-type/list": true,
	// 	"/upload":         true,
	// 	"/blog/hot":       true,
	// 	"/user/code":      true,
	// 	"/user/login":     true,
	// }
	h.Use(func(ctx context.Context, c *app.RequestContext) {
		path := string(c.Request.Path())
		for i := 0; i < len(excludedPaths); i++ {
			if len(path) < len(excludedPaths[i]) {
				continue
			}
			if path[:len(excludedPaths[i])] == excludedPaths[i] {
				return
			}
		}
		hlog.CtxInfof(ctx, "path = %s", path)
		interceptor.LoginInterceptor(ctx, c)
	})

	mysql.Init()
	redis.Init()
	h.Use(interceptor.UniqueVisitor)

	register(h)
	h.Spin()
}
